Клиент серверная архитектура. Из Клиент (в данном случае браузер) делаем http запросы(request) к серверу.На сервере работает сприг приложение
и к этому спринг приложению получали доступ по его url(localhost:8080),где 8080 - номер порта,на котором работает спринг приложение.В браузере делали запросы,к
определенным адресам в нашем спринг приложении и от сервера получили ответы(http response),ответы были jsp страницами,Которые отображались в нашем браузере.


Request сосоит из : Стартовой строки,заголовков и тела сообщения.
Стартовая строка состоит из Метода запроса(Get,put..),адреса(/wiki/java) и используемого протокола(http/1.1).
Если мы загружаем файл куда нибудь,то все это помещается в тело request.

Методы дают понять серверу,какое действие хочет совершить клиент.Два самых используемых метода: Get and Post.Есть ещё Put patch and Delete.

Get - с помощью этого метода мы получаем данные с удаленных сервером.Самы используемый метод.Этот запрос идемпатентный(ничего не меняет на сервере).
Тело запроса пустое.Если нам необходимо послать какие то параметры в методе гет,тогда мы отправляем его в самом адресе,в самом url.Параметры нужны
для передачи информации от клиента к серверу во время запроса.Параметры Get запроса передаются в самом url после знака ? в формате ключ=значение(
Тело гет запроса всегда пустое).Несколько параметров (пар ключ=значение) разделяюстя знаком &.

Post - Цель запроса,имзенить что то на сервере(чаще всего что то добавить).Часто используется для отправки данных с веб-форм,но не только для этого(
создать новую учетную запись,твитнуть что нибудь,добавить запись в сообщество,загрузить фото и т.д)Все параметры хранятся в теле запроса.


Response состоит из: Стартовой строки,заголовков и тела сообщения.
Стартовая строка состоит из используемого протокола и кода ответа.По коду ответа наш браузер может понять,был ли запрос к серверу успешен или нет.
Статус ответа: 2ХХ - Все ОК, 3ХХ - Редирект, 4ХХ - Ошибка клиента, 5ХХ - Ошибка сервера.
Content-type : text/html, text/json, text/css and etc