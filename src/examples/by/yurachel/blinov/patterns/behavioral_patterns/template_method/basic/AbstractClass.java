package examples.by.yurachel.blinov.patterns.behavioral_patterns.template_method.basic;

/*Определяет основу алгоритма действий,
оставляя элементы реализации подклассам.
Алгоритм и последовательность действий зада-
ются абстрактными методами, навязывая кон-
тракт подклассам для определения и расшире-
ния специфичного поведения в полиморфных
методах. Подкласс в этой ситауции может заме-
нять части метода, не переписывая их заново.
Если отвлечься от академческого определе-
ния, то Template Method — не что иное, как
механизм переопределения методов суперклас-
са или реализации абстрактных методов интер-
фейса или абстрактного класса. Если абстрагироваться от организации прави-
ла вызова реализуемых методов, в некотором методе, определяющем правила
и последовательность их вызовов, то изучение этого шаблона есть повторение
принципов полиморфизма.*/
public abstract class AbstractClass {
    public abstract void primitiveOperation1();

    public abstract void primitiveOperation2();

    public void templateMethod() {
        primitiveOperation1();
        primitiveOperation2();
    }
}
