Этот шаблон используется в качестве альтернативы порождению подклассов для расширения функиональности.
Пример использования:
- Динамическое и понятное клиентам добавление обязанностей объектам.
- Реализация обязанностей, которые могут быть сняты с объекта.
- Расширение класса путем порождения подклассов невозможно по каким либо причинам.

Разбираем на основе примера из блинова.Example.

У нас есть какой то интерфейс,в данном случае IEmployee.Он определяет поведение,
которому будут соответствовать классы,которые его реазилуют.В данном случае это три метода.

У нас есть какой то класс Employee ,который реализует интерфейс IEmployee и
реализует методы ,определныые в интерфейсе.За счет применения декоратора,функциональность этого
класса будет расширена.Сам же класс может запрещать наследование,может быть объявлен как
final.

У нас есть класс EmployeeDecorator,который реализует интерфейс IEmployee,содержит
поле Employee и конструктор,который в качестве параметра принимает поле Employee.
В метода,реализацию которых нужно переопределить,вызывается соответствующие методы
поля Employee.

Затем мы создаем необходимое нам количество классов,например TesterDecorator и
TeamLeadDecorator,которые расширяют класс EmployeeDecorator.В них мы переопределяем
методы,функциональность которых мы хотим расширить.

С помощью такой конструкции IEmployee employee =
 new TesterDecorator(new Employee("Ivanov"));
 Мы дополняем функциональность класса Employee.
