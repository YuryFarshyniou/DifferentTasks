Цель: Предоставить унифицированный интерфейс вместо несколькоих интерфейсов подсистемы.

Используется для определения интерфейса высокого уровня,который упрощает использование
подсистемы.

Пример:
- Изолирование клиентов от компонентов подсистемы,упрощая работу с ней.
- Необходимость ослабления связанности подсистемы с клиентами.

У нас есть класс Job,который вополняет какую то работу,есть класс BugTracker,который
указывает,активен ля в данный момент спринт или нет.Так же методы,которые запускают или останавливают
спринт.Есть класс Developer,который при активном спринте делает работу,при неактивном отдыхает.
Теперь запускаем в runner программу,и види,что в клиентском коде(методе main в данном
случае),награмождение клиентского кода происходит.Поэтому мы создаем отдельный класс
Facade и в нем создаем экземпляры этих трех классов и создаем метод,который будет
инкапсулировать работу наших трех классов.

Служит ,что бы не нагромождать клиентский код,а вынести в отдельныйй метод работу сразк нескольких
методов.